import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import xarray as xr
import os
import glob
import datetime
import matplotlib.pyplot as plt
from functions import preproc_nemo
from functions import yearFraction
from functions import remove_seasonal_cycle
expname='beta'
expdir=os.path.join('/ec/res4/scratch/itas/ece4/', expname, 'output', 'nemo')


domain = xr.open_dataset(os.path.join(expdir, '..', '..', 'domain_cfg.nc'))
vol = domain['e1t']*domain['e2t']*domain['e3t_0']
area = domain['e1t']*domain['e2t']
sect = domain['e2t']*domain['e3t_0']
dz = domain['e3t_0']


start_year = 1990
end_year = 2049
# Generate a list of file paths that match the specified year range
filelist = []
for year in range(start_year, end_year + 1):
    pattern = os.path.join(expdir, f"{expname}_oce_1m_T_{year}-{year}.nc")
    matching_files = glob.glob(pattern)
    filelist.extend(matching_files)
data = xr.open_mfdataset(filelist, preprocess=preproc_nemo)
#filelist = glob.glob(os.path.join(expdir, expname + '_oce_1m_T_*.nc'))
#data = xr.open_mfdataset(filelist, preprocess=preproc_nemo)
data


# averaged global temperature in time
data.thetao.weighted(vol).mean(dim=['z', 'y', 'x']).plot()


# averaged surface temperature in time
data.tos.weighted(area).mean(dim=['y', 'x']).plot()


# averaged tos per month 
for tm in range(12):
    data.where(data['time.month']==tm+1,drop=True).tos.weighted(area).mean(dim=['y', 'x']).plot()


# plot averaging tos removing seasonal cycle
xdata = data.time
ydata = data.tos.weighted(area).mean(dim=['y', 'x'])
for tm in range(12):
    d1 = pd.to_datetime(xdata.values)
    x1 = [yearFraction(t) for t in d1]
    d0 = pd.to_datetime(xdata.where(data['time.month']==tm+1,drop=True).values)
    x0 = [yearFraction(t) for t in d0]
    y0 = ydata.where(data['time.month']==tm+1,drop=True).values
    x1 = np.array(x1)
    x0 = np.array(x0)
    y0 = np.array(y0.flatten())
    if (tm==0):
        y1 = np.interp(x1, x0, y0)
    else:
        y1 = y1 + np.interp(x1, x0, y0)
    plt.scatter(x0,y0,marker='+')
y1 = y1/12
plt.plot(x1,y1)


# plot averaged global temperature removing seasons
for tm in range(12):
    d1 = pd.to_datetime(data.time.values)
    x1 = [yearFraction(t) for t in d1]
    d0 = pd.to_datetime(data.where(data['time.month']==tm+1,drop=True).time.values)
    x0 = [yearFraction(t) for t in d0]
    y0 = data.where(data['time.month']==tm+1,drop=True).thetao.weighted(vol).mean(dim=['z', 'y', 'x']).values
    x1 = np.array(x1)
    x0 = np.array(x0)
    y0 = np.array(y0.flatten())
    if (tm==0):
        y1 = np.interp(x1, x0, y0)
    else:
        y1 = y1 + np.interp(x1, x0, y0)
    plt.scatter(x0,y0,marker='+',s=10)
y1 = y1/12
plt.plot(x1,y1)


# plot in time
for tm in range(12):    
    x0 = np.array(dateDecimal(data.where(data['time.month']==tm+1,drop=True).time.values))
    y0 = np.array(data.where(data['time.month']==tm+1,drop=True).thetao.weighted(vol).mean(dim=['z', 'y', 'x']).values.flatten())
    plt.scatter(x0,y0,marker='+',s=10,color='dodgerblue')
td = np.array(dateDecimal(data.time.values))
plt.plot(td,thetao_gns,color='red')
plt.plot(td,thetao_ma,color='forestgreen')


# extract the seasonal component
d1 = pd.to_datetime(data.time.values)
x1 = [yearFraction(t) for t in d1]
y0 = data.thetao.weighted(vol).mean(dim=['z', 'y', 'x']).values
y0 = np.array(y0.flatten())
y2 = y0-y1
plt.plot(x1,y2)


# removing seasonal cycles (gns: global no seasons)
xdata = data.time
ydata = data.thetao.weighted(vol).mean(dim=['z', 'y', 'x'])
thetao_gns = remove_seasonal_cycle(xdata, ydata)
ydata = data.qsr_oce.weighted(area).mean(dim=['y', 'x'])
qsr_gns = remove_seasonal_cycle(xdata, ydata)
ydata = data.qns_oce.weighted(area).mean(dim=['y', 'x'])
qns_gns = remove_seasonal_cycle(xdata, ydata)
ydata = data.qt_oce.weighted(area).mean(dim=['y', 'x'])
qt_gns = remove_seasonal_cycle(xdata, ydata)
ydata = data.tos.weighted(area).mean(dim=['y', 'x'])
tos_gns = remove_seasonal_cycle(xdata, ydata)
ydata = data.heatc.weighted(area).mean(dim=['y', 'x'])
heatc_gns = remove_seasonal_cycle(xdata, ydata)

# gregory plot - thetao vs qsr
colormap = plt.get_cmap('viridis')
colors = [colormap(i / (len(thetao_gns) - 1)) for i in range(len(thetao_gns) - 1)]
fig, ax = plt.subplots()
for i in range(len(thetao_gns) - 1):
    ax.plot(thetao_gns[i:i+2], qsr_gns[i:i+2], color=colors[i])
sm = plt.cm.ScalarMappable(cmap=colormap, norm=plt.Normalize(0, len(thetao_gns) - 1))
sm.set_array([])
cbar = plt.colorbar(sm, ax=ax)
cbar.set_label('time')
plt.xlabel(r'$T$ - Global Temperature ')
plt.ylabel(r'$Q$ - Net Solar Heat Flux at Ocean Surface')
plt.title('Gregory plot')
plt.show()
