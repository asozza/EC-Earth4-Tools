# =====================================================================
# Main run script
# Submit job, setup timing, run one leg with config, setup, pre, run,
# post and monitoring stages, submit next leg if needed
# =====================================================================

# Submit job
- base.include:
    src: "scriptlib/config-{{job.launch.method}}.yml"
- base.include:
    src: scriptlib/submit.yml

# Configure timing
- base.task_timer:
    mode: instances
    set: se_timing
    logging: debug
- base.time:
    set: script_start_time

# Configure 'main' and all components
- base.include:
    src: "scriptlib/config-{{item}}.yml"
    ignore_not_found: true
  loop: "{{['main'] + model_config.components}}"

# On first leg: setup 'main' and all components
- when: experiment.schedule.leg.start == experiment.schedule.start
  base.include:
    src: "scriptlib/setup-{{item}}.yml"
    ignore_not_found: true
  loop: "{{['main'] + model_config.components}}"

# Pre step for 'main' and all components
- base.include:
    src: "scriptlib/pre-{{item}}.yml"
    ignore_not_found: true
  loop: "{{['main'] + model_config.components}}"

# Start model run for leg
- base.time:
    set: model_start_time
- base.include:
    src: "scriptlib/launch-{{job.launch.method}}.yml"
- base.time:
    since: "{{model_start_time}}"
    set: model_elapsed_time

# Run post step for all components
- base.include:
    src: "scriptlib/post-{{item}}.yml"
    ignore_not_found: true
  loop: "{{['main'] + model_config.components}}"

# Monitoring
- when: experiment.monitoring.activate
  base.include:
    src: scriptlib/monitoring.yml

# Log timing
- base.time:
    since: "{{script_start_time}}"
    set: script_elapsed_time
- base.template:
    src: templates/timing.log.j2
    dst: 'log/{{"%03d" % experiment.schedule.leg.num}}/timing.log'

- when: job.resubmit and experiment.schedule.end != experiment.schedule.leg.end
  base.echo:
    msg: Submitting job for next leg...

# Last thing we do before resubmitting: Save job log file
- base.move:
    src: "{{se.cli.cwd}}/{{experiment.id}}.log"
    dst: 'log/{{"%03d" % experiment.schedule.leg.num}}'

# Submit next leg if needed
- when: job.resubmit and experiment.schedule.end != experiment.schedule.leg.end
  do:
    - base.chdir:
        path: "{{se.cli.cwd}}"
    - base.context:
        job:
          slurm:
            sbatch:
              opts:
                submit_from_batch_job: true
    - base.include:
        src: scriptlib/submit.yml
